$.extend({
  searchParamString: function( argument ) {
    argument = argument.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
    var regexS = "[\\?&]" + argument + "=([^&#]*)";
    var regex = new RegExp( regexS );
    var results = regex.exec( window.location.href );
    if ( results == null ) {
      return false;
    }
    else {
      return results[1];
    }
    return vars;
  },
  searchParamArray: function( param ) {
    var searchParamArray = $.searchParamString(param);
    if ( searchParamArray ) {
      return $.unique( searchParamArray.split(',') );
    } else {
      return false;
    }
  },
      
  /*
   * Search for a words and return bbox.
   * words: Array of words
   * Remedy: fn to fix coordinates
   * Return array of coordinates
   */
  
  wordsBBox: function( words, remedy ) {
    words =  words || [];

    function defaultCoord( coord ) {
      return [ coord[0], coord[1], coord[2], coord[3] ];
    }
    
    var l = words.length,
        selector = '',
        wordsBBox = [],
        fn = defaultCoord;
        
    if ( jQuery.isFunction(remedy) ) {
      fn = remedy;
    }

    while (l--) {
      selector += ".ocr_word:contains('"+ words[l] +"'),";
    }

    $(selector).each( function(i) {
      var coord = this.title.split(' ');
      if ( coord.shift() === 'bbox' ) {
        wordsBBox.push(fn(coord));
      }
    });
    return wordsBBox;
  }
});